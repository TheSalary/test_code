/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        if(root==NULL) return 0;
        if(root->left==nullptr &&root->right == nullptr) return root->val;
        vector<int> ans = robTree(root);
        return max(ans[0],ans[1]);
    }

    vector<int> robTree(TreeNode* node){//dp数组实际上是返回值，这里用pair<int,int>更好
        if(node==nullptr) return vector<int>{0,0};

        vector<int> left = robTree(node->left);//遍历顺序为后序遍历，动态规划五部曲的遍历顺序在树中似乎更好挑选，因为一共就这些
        vector<int> right = robTree(node->right);
        int val1 = node->val + left[0] + right[0];//状态转移方程，与正常的dp相同，需要考虑明白
        int val2 = max(left[1],left[0]) + max(right[1],right[0]);
        return vector<int> {val2,val1};
    }
};
