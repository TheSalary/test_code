class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = 0;
        for(int i = 0;i < nums.size();++i){
            sum += nums[i];
        }
        if((sum + target)%2!=0) return 0;
        if(abs(target)>sum) return 0;
        int bagsize = (sum + target)/2;//left + right = sum,left（这里是正数集合）- right（这里是负数集合）= target,推导有left = (sum + target) / 2; 
        int dp[1005]={0};
        dp[0]=1;//初始化？
        for(int i = 0;i<nums.size();++i){
            for(int j = bagsize; j>=nums[i];--j){
                dp[j] += dp[j - nums[i]];//eg.当前数为2，则到第j个容量应该有dp[j-2]种方案，如dp[5]=dp[3],因为容量为3的方式已知，3+2=5即可递推
            }
        }
        return dp[bagsize];
    }
};
